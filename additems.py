
from operator import irshift
from datetime import date
import items
import os

#choose 1    add item to warehouse_items 
class addItem():
    def __init__(self,code,name,idate,cost,sales,quantity):
        print(' Adding item to the shop ')
        self.item ={}
        quantityi = quantity.split('\n')
        x = code.isnumeric() #check if the code is numeric from 0 to 9 
        if x: #if the code is numeric
            if int(code) < 9999: #it has to be only 4 digits
                self.item['code'] = code #add everything to the item  code as code for the item
                self.item['name'] = name #name of the item is name
                self.item['date'] = idate #date of the item
                self.item['cost'] = cost #cost of the item
                self.item['sales'] = sales #sales of the item
                self.item['quantity'] = quantityi[0] 
                items.marketItems.append(self.item) #add the item to the list
                print(' Added. ') #print Added  to it shows everything added 
                
            else:
                print("Code has to be 4 digits at most \n") #else give error on the digits number
        else:
            print("code only has to be a number \n") #else give error on the number it has a non numeric code
#choose 2
class addSuperMarket():
    def __init__(self,code,name,address): 
        today = date.today() #the date is todays date 
        print(' Adding super market to the shop ')
        self.code = code #code is super market code
        self.market ={}
        self.market['code'] = code #code is super market code
        self.market['name'] = name #name is super market name
        self.market['address'] = address #address is super market address
        self.market['date'] = today.strftime("%d/%m/%Y") #today's date generated by day then month and year
        items.systemmarket.append(self.market) #add it to the super market list
        fname = "DistributeItems_"+self.code+".txt" #add a file of the super market
        if not os.path.isfile(fname): #if the file doesn't exist create it. 
            fopen = open(fname, "w") #create the file
            fopen.close() #close it
        print(' Added. ') #and print the added as everything goes fine 

class showItems():
    def __init__(self,idate):
        self.idate = idate #get the expired date 
        countSales = 0 #counter fot sales 
        countCost = 0 #counter for costs
        expdate = self.idate.split('/') #get the expired date and split it 
        dateexp = int(expdate[2]+expdate[1]+expdate[0]) #split the date then add each as a string and turn it into a integer
        for x in items.marketItems: #for each item in the list of werehouse 
            dateitem = x['date'].split('/') #split the date
            if int(dateitem[2]+dateitem[1]+dateitem[0]) < dateexp: #chech if the date is less then  the expire date
                print (x) #print the item's data
                countSales += ((float(x['cost'])) * int(x['quantity'])) #sum the sales of the item
                countCost += ((float(x['sales'])) * int(x['quantity'])) #sum the cost of the cost of the item
        
        print("Total sales :",countSales, "\n") #then print the total sale
        print("Total cost : ",countCost, "\n") # and print the total cost

class saveintoFile(): #class to add into werehouse file 
    def __init__(self):
        try: #try and finally to handle the error that occurs when opening and closing a file 
            fopen = open("warehouse_items.txt",'w') #open the werehouse file
            lines = 0
            for x in items.marketItems: #for each item in the list 
                fopen.write(x['code']+";"+x['name']+";"+x['date']+";"+x['cost']+";"+x['sales']+";"+x['quantity'])
                lines += 1 #check the number of lines
                if lines < len(items.marketItems):
                    fopen.write("\n") #if the lines less than the length add a line 


        finally:
            fopen.close() # finally close the file 






